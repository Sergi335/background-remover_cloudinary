---
---

<div class="bg-white rounded-lg shadow-md p-6">
  <form id="uploadForm" class="space-y-6">
    <div class="flex flex-col items-center justify-center w-full">
      <label for="imageInput" class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
        <div class="flex flex-col items-center justify-center pt-5 pb-6">
          <svg class="w-10 h-10 mb-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
          </svg>
          <p class="mb-2 text-sm text-gray-500"><span class="font-semibold">Click to upload</span> or drag and drop</p>
          <p class="text-xs text-gray-500">PNG, JPG or JPEG (MAX. 5MB)</p>
        </div>
        <input id="imageInput" type="file" class="hidden" accept="image/*" />
      </label>
    </div>
    <div id="errorMessage" class="hidden text-red-500 text-sm text-center"></div>
    <div id="preview" class="hidden space-y-4 overflow-hidden">
      <div class="relative">
        <div id="compareContainer" class="relative w-full aspect-video select-none">
          <div class="absolute inset-0 overflow-hidden">
            <img id="originalImage" src="" alt="Original" class="w-full h-full object-cover" />
          </div>
          <div class="absolute inset-0 overflow-hidden comparison-overlay">
            <img id="processedImage" src="" alt="Processed" class="w-full h-full object-cover" />
          </div>
          <input 
            type="range" 
            min="0" 
            max="100" 
            value="50" 
            class="absolute top-1/2 left-0 w-full slider"
            id="slider"
          />
          <div class="handle"></div>
        </div>
        <div class="absolute inset-0 flex items-center justify-center bg-black/50 z-10" id="loadingOverlay" style="display: none;">
          <div class="animate-spin rounded-full h-12 w-12 border-4 border-white border-t-transparent"></div>
        </div>
      </div>  
    </div>
    <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors">
        Remove Background
    </button>
  </form>
</div>

<style>
  .comparison-overlay {
    clip-path: inset(0 50% 0 0);
  }

  .slider {
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
    width: 100%;
    height: 100%;
    transform: translateY(-50%);
    z-index: 10;
  }

  .slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 3px;
    height: 100vh;
    background: white;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    cursor: col-resize;
  }

  .handle {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50%;
    width: 3px;
    background: white;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    pointer-events: none;
    transform: translateX(-50%);
  }
</style>

<script>
const form = document.getElementById('uploadForm') as HTMLFormElement;
const imageInput = document.getElementById('imageInput') as HTMLInputElement;
const preview = document.getElementById('preview') as HTMLElement;
const compareContainer = document.getElementById('compareContainer') as HTMLElement;
const loadingOverlay = document.getElementById('loadingOverlay') as HTMLElement;
const originalImage = document.getElementById('originalImage') as HTMLImageElement;
const processedImage = document.getElementById('processedImage') as HTMLImageElement;
const slider = document.getElementById('slider') as HTMLInputElement;
const overlay = document.querySelector('.comparison-overlay') as HTMLElement;
const handle = document.querySelector('.handle') as HTMLElement;
const errorMessage = document.getElementById('errorMessage') as HTMLElement;

let originalImageUrl = '';

function showError(message: string) {
  errorMessage.textContent = message;
  errorMessage.classList.remove('hidden');
  setTimeout(() => {
    errorMessage.classList.add('hidden');
  }, 5000);
}

function validateFile(file: File): boolean {
  const maxSize = 5 * 1024 * 1024; // 5MB
  const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];

  if (!allowedTypes.includes(file.type)) {
    showError('Please upload a PNG, JPG, or JPEG file.');
    return false;
  }

  if (file.size > maxSize) {
    showError('File size must be less than 5MB.');
    return false;
  }

  return true;
}

imageInput.addEventListener('change', (e: Event) => {
  const file = (e.target as HTMLInputElement).files?.[0];
  if (file) {
    if (!validateFile(file)) {
      return;
    }

    const reader = new FileReader();
    reader.onload = (e: ProgressEvent<FileReader>) => {
      if (e.target?.result) {
        originalImageUrl = e.target.result as string;
        updateImages(originalImageUrl, originalImageUrl);
        preview.classList.remove('hidden');
      }
    };
    reader.onerror = () => {
      showError('Error reading file. Please try again.');
    };
    reader.readAsDataURL(file);
  }
});

form.addEventListener('submit', async (e: Event) => {
  e.preventDefault();
  const file = imageInput.files?.[0];
  if (!file) {
    showError('Please select an image first.');
    return;
  }

  if (!validateFile(file)) {
    return;
  }

  try {
    loadingOverlay.style.display = 'flex';
    const formData = new FormData();
    formData.append('image', file);

    const response = await fetch('/api/remove-background', {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to process image');
    }

    const data = await response.json();
    updateImages(originalImageUrl, data.url);
  } catch (error) {
    if (error instanceof Error) {
      showError(error.message);
    } else {
      showError('An unexpected error occurred. Please try again.');
    }
  } finally {
    loadingOverlay.style.display = 'none';
  }
});

function updateImages(originalSrc: string, processedSrc: string) {
  originalImage.src = originalSrc;
  processedImage.src = processedSrc;
}

function updateComparison(value: string) {
  overlay.style.clipPath = `inset(0 ${100 - parseInt(value)}% 0 0)`;
  handle.style.left = `${value}%`;
}

slider.addEventListener('input', (e: Event) => {
  const target = e.target as HTMLInputElement;
  updateComparison(target.value);
});
</script>